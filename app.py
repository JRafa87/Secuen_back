import streamlit as st
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

from data_util import generate_synthetic_sequence_data, split_data
from model import create_ff_model, compile_model, train_model, evaluate_model, predict_sequence

# --- Configuraci√≥n de la p√°gina ---
st.set_page_config(page_title="Predicci√≥n de Secuencias Cortas", layout="centered")
st.title("üîÆ Predicci√≥n de Secuencias Num√©ricas Cortas")
st.markdown("Un modelo feedforward simple para predecir el siguiente valor (en este caso, la suma) de una secuencia num√©rica.")

# --- Par√°metros configurables ---
sequence_length = st.sidebar.slider("Longitud de la Secuencia:", min_value=2, max_value=5, value=3)
num_sequences = st.sidebar.slider("N√∫mero de Secuencias:", min_value=100, max_value=2000, value=1000, step=100)
epochs = st.sidebar.slider("N√∫mero de √âpocas:", min_value=10, max_value=100, value=50, step=10)
learning_rate = st.sidebar.slider("Tasa de Aprendizaje:", min_value=0.0001, max_value=0.01, value=0.001, step=0.0001)

# --- Generaci√≥n y divisi√≥n de datos ---
with st.spinner("Generando y dividiendo datos..."):
    data, targets = generate_synthetic_sequence_data(num_sequences, sequence_length)
    train_data, train_targets, test_data, test_targets = split_data(data, targets)
st.success("‚úÖ Datos generados y divididos.")

# --- Estado de la sesi√≥n para el modelo ---
if 'model' not in st.session_state:
    st.session_state.model = None

if 'model_trained' not in st.session_state:
    st.session_state.model_trained = False

# --- Entrenamiento del modelo ---
if st.sidebar.button("üöÄ Entrenar Modelo"):
    with st.spinner(f"Entrenando el modelo durante {epochs} √©pocas..."):
        model = create_ff_model(sequence_length)
        model = compile_model(model, learning_rate=learning_rate)
        history = train_model(model, train_data, train_targets, epochs=epochs, verbose=1)
        st.session_state.model = model
        st.session_state.model_trained = True
        st.success("‚úÖ ¬°Modelo entrenado!")

        # Mostrar la p√©rdida durante el entrenamiento
        fig, ax = plt.subplots()
        ax.plot(history.history['loss'], label='P√©rdida (Entrenamiento)')
        ax.plot(history.history['val_loss'], label='P√©rdida (Validaci√≥n)')
        ax.set_xlabel('√âpoca')
        ax.set_ylabel('Error Cuadr√°tico Medio (MSE)')
        ax.legend()
        st.pyplot(fig)

# --- Predicci√≥n ---
st.header("üîÆ Predicci√≥n de Nueva Secuencia")
st.markdown("Introduce una secuencia num√©rica (separada por comas) para predecir el siguiente valor (su suma).")
new_sequence_str = st.text_input(f"Secuencia de {sequence_length} n√∫meros:", "")

if st.session_state.model_trained and st.session_state.model is not None:
    if st.button("‚ú® Predecir"):
        try:
            new_sequence = [float(x.strip()) for x in new_sequence_str.split(',')]
            if len(new_sequence) == sequence_length:
                prediction = predict_sequence(st.session_state.model, new_sequence)
                st.subheader(f"Predicci√≥n para la secuencia: {new_sequence}")
                st.success(f"El modelo predice: **{prediction:.2f}**")
            else:
                st.error(f"Por favor, introduce una secuencia de exactamente {sequence_length} n√∫meros.")
        except ValueError:
            st.error("Por favor, introduce n√∫meros v√°lidos separados por comas.")
else:
    st.info("Por favor, entrena el modelo primero en la barra lateral.")